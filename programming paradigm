프로그램의 패러다임은 소프트웨어를 어떻게 개발할지에 대한 생각의 틀 또는 접근 방식을 의미한다.
패러다임은 크게 명령형(Imperative)과 선언형(Declarative)으로 나눌 수 있다.

객체 지향 프로그래밍(Object Oriented Programming):
장점
1. 코드 재사용이 쉽다. 왜냐하면 남이 만든 클래스를 가져와서 사용 할 수 있고, 상속을 통해 확장해서 사용할 수 있다.
2. 유지 보수가 쉽다. 왜냐하면 절차 지향 프로그래밍에서는 코드를 수정할 떄 일일히 수정해야 하는 반면에, 
객체 지향 프로그래밍에서는 수정해야할 부분이 class내부의 맴버변수 혹은 method로 존재하기 때문에 해당 부분만 수정하면 된다.
3. 대형 프로젝트에 적합하다. class 단위로 모듈화 시켜서 개발 할 수 있으므로 여러명이서 프로젝트를 개발할때 업무 분담을 하기가 쉽다.

단점
1. 처리 속도가 상대적으로 느리다. 
2. 객체가 많으면 용량이 커진다.
3. 설계시 많은 시간과 노력이 필요하다.

JaveScript의 OOP 특징:프로토타입 기반의 객체 지향프로그램임. class기반 언어인 Java나 C++과 달리 JS는 프로토타입을 통해 객체지향의 핵심 개념들을 구현 합니다.
OOP의 4가지 핵심원칙:
1. 캡슐화(encapsuration): 데이터와 메소드를 하나의 객체로 묶어서 관리
2. 상속(inheritance): 프로토타입 체인을 통한 속성과 메소드 상속
3. 추상화(abstraction): 복잡한 구성을 숨기고 단순한 인터페이스 제공
4. 다형성(polymorphism): 같은 인터페이스로 다른 동작 구현

주의 사항: JS는 순수한 객체지향 언어는 아니다. 원래는 html페이지를 동적으로 만들기 위한 인터프리터 언어로 시작 되었지만, 객체지향 프로그래밍의 특징들을 지원한다.

명령형 특징: 
1. 무엇을 할지보다 어떻게 할지에 초점을 맞춘다.
2. 개발자가 컴퓨터한테 단계별로 명령을 내리고 프로그램의 상태변화와 실행 흐름을 직접 제어한다. ex) C, Java, Python 등..

명령형 하위 패러다임: 
1. 절차형 프로그래밍: 프로그래밍을 함수나 절차단위로 쪼개어서 순서대로 실행하는것. ex) C
2. 객체 지향 프로그래밍: 프로그래밍에서 필요한 데이터를 추상화 시켜서 상태와 행위를 가진 객체를 만들고 그 객체들 간에 유기적인 상호작용을 통해서 로직을 구상하는 방법이다. ex) JAVA, C++, JS
프로그램을 나누어 만들고 프로그램끼리 상호작용을 가능하게 하도록 만든다.


선언형 특징: 
1. 어떻게 보다 무엇을 할지에 초점을 맞춘다.
2. 원하는 결과를 선언하고 구체적인 처리 방법은 컴퓨터가 알아서 한다. ex) SQL, html, 함수형 언어 등..

선언형 하위 패러다임: 
1. 함수형 프로그래밍: 순수함수와 함수의 조합을 중심으로 소프트웨어르 구상한다. 상태 변화와 외부의 영향을 최대한 안받으려고 하며 코드의 예측 가능성과 코드의 재사용서을 높임.
(순수함수: 변수값이 변해도 결과값이 같은것, 외부의 상태를 바꾸지도 의존하지도 않는다.) ex) HASKELL 등..
2. 논리형 프로그래밍: 논리적 규칙을 선언하여 문제를 해결하는 방식 ex) prolog
