
프로그램의 패러다임은 소프트웨어를 어떻게 개발할지에 대한 생각의 틀 또는 접근 방식을 의미한다.
패러다임은 크게 명령형(Imperative)과 선언형(Declarative)으로 나눌 수 있다.

명령형 특징: 
1. 무엇을 할지보다 어떻게 할지에 초점을 맞춘다.
2. 개발자가 컴퓨터한테 단계별로 명령을 내리고 프로그램의 상태변화와 실행 흐름을 직접 제어한다. ex) C, Java, Python 등..

명령형 하위 패러다임: 
1. 절차형 프로그래밍: 프로그래밍을 함수나 절차단위로 쪼개어서 순서대로 실행하는것. ex) C
2. 객체 지향 프로그래밍: 프로그래밍에서 필요한 데이터를 추상화 시켜서 상태와 행위를 가진 객체를 만들고 그 객체들 간에 유기적인 상호작용을 통해서 로직을 구상하는 방법이다. ex) JAVA, C++, JS
프로그램을 나누어 만들고 프로그램끼리 상호작용을 가능하게 하도록 만든다.


선언형 특징: 
1. 어떻게 보다 무엇을 할지에 초점을 맞춘다.
2. 원하는 결과를 선언하고 구체적인 처리 방법은 컴퓨터가 알아서 한다. ex) SQL, html, 함수형 언어 등..

선언형 하위 패러다임: 
1. 함수형 프로그래밍: 순수함수와 함수의 조합을 중심으로 소프트웨어르 구상한다. 상태 변화와 외부의 영향을 최대한 안받으려고 하며 코드의 예측 가능성과 코드의 재사용서을 높임.
(순수함수: 변수값이 변해도 결과값이 같은것, 외부의 상태를 바꾸지도 의존하지도 않는다.) ex) HASKELL 등..
2. 논리형 프로그래밍: 논리적 규칙을 선언하여 문제를 해결하는 방식 ex) prolog 
