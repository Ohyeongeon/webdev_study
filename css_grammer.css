/* ============================================
CSS 기본 문법 정리 (css_grammar.css)
============================================ */

/* CSS란?
HTML이 뼈대라면 CSS는 피부 역할
웹페이지를 시각적으로 꾸며주는 스타일링 언어 */

/* ============================================
1. CSS 적용 방법 3가지
============================================ */

/* 1-1. 인라인 스타일 (HTML 태그 안에 직접)
<p style="color: blue; font-size: 16px;">텍스트</p>
장점: 빠른 적용, 단점: 재사용 어려움 */

/* 1-2. 내부 스타일 시트 (HTML head 안에)
<style>
.highlight { color: blue; font-weight: bold; }
</style>
장점: 한 파일 내 여러 스타일, 단점: 다른 파일에서 재사용 불가 */

/* 1-3. 외부 스타일 시트 (별도 CSS 파일) - 실무에서 주로 사용
<link rel="stylesheet" href="css_grammar.css">
장점: 여러 파일에서 재사용, 유지보수 용이 */

/* ============================================
2. CSS 선택자 (Selectors)
============================================ */

/* 2-1. 태그 선택자 - HTML 태그 이름 직접 사용 */
p {
    color: blue;
    font-size: 16px;
}

h1 {
    color: red;
    text-align: center;
}

/* 2-2. 클래스 선택자 - .클래스명 (여러 요소에 적용 가능) */
.highlight {
    font-weight: bold;
    background-color: yellow;
}

.good {
    color: rgb(255, 0, 0);
    font-weight: bold;
}

/* 2-3. ID 선택자 - #아이디명 (한 페이지에 하나만) */
#main-title {
    text-align: center;
    font-size: 32px;
}

/* 2-4. 속성 선택자 - 특정 속성을 가진 요소 선택 */
input[type="text"] {
    background-color: lightblue;
    border: 1px solid gray;
}

/* 2-5. 그룹 선택자 - 여러 선택자에 같은 스타일 적용 */
h1, h2, h3 {
    font-family: Arial, sans-serif;
    margin-bottom: 10px;
}

/* ============================================
3. CSS 상속과 캐스케이딩
   ============================================ */

/* 3-1. 상속 (Inheritance) - 부모 요소 스타일이 자식에게 전달 */
.parent {
    color: blue;           /* 상속됨 - 글자 관련 */
    font-family: Arial;    /* 상속됨 - 글자 관련 */
    border: 1px solid black; /* 상속 안됨 - 레이아웃 관련 */
}

/* 주로 상속되는 속성: color, font-family, font-size, text-align 등
상속 안되는 속성: width, height, margin, padding, border 등 */

/* 3-2. 캐스케이딩 우선순위 (높은 순서대로) */
/* 1순위: !important 키워드 */
.important-text {
    color: green !important;
}

/* 2순위: 인라인 스타일 (style="...") */

/* 3순위: ID 선택자 (#) */
#specific-id {
    background-color: violet;
}

/* 4순위: 클래스 선택자 (.) */
.cls {
    background-color: blue;
}

/* 5순위: 태그 선택자 */
h2 {
    background-color: red;
}

/* 같은 우선순위면 나중에 작성된 것이 적용됨 */

/* ============================================
4. 박스 모델 (Box Model)
============================================ */

.box {
    /* 내용 영역 크기 */
    width: 200px;
    height: 100px;
    
    /* 내용과 테두리 사이 공간 */
    padding: 20px;
    
    /* 테두리 */
    border: 3px solid blue;
    
    /* 다른 요소와의 바깥 간격 */
    margin: 20px;
    
    /* 박스 크기 계산 방식 변경 (실무에서 주로 사용) */
    box-sizing: border-box; /* padding, border 포함해서 width, height 계산 */
}

/* 기본값: box-sizing: content-box (content만 width, height에 포함) */

/* ============================================
5. Display 속성 - 요소 배치 방식
============================================ */

/* 5-1. block - 한 줄 전체 차지, 세로로 배치 */
.block-element {
    display: block;
    width: 100%;
    height: 50px;
    background-color: lightgray;
    /* div, p, h1 등이 기본적으로 block */
}

/* 5-2. inline - 옆으로 나란히 배치 */
.inline-element {
    display: inline;
    background-color: yellow;
    /* width, height 적용 안됨 */
    /* span, a, b 등이 기본적으로 inline */
}

/* 5-3. inline-block - inline처럼 나란히 + block처럼 크기 조절 가능 */
.inline-block-element {
    display: inline-block;
    width: 100px;
    height: 50px;
    background-color: lightblue;
}

/* ============================================
6. Position 속성 - 요소 위치 지정
============================================ */

/* 6-1. static (기본값) - 일반적인 문서 흐름 */
.static-element {
    position: static;
    /* top, right, bottom, left 무시됨 */
}

/* 6-2. relative - 원래 위치 기준으로 상대적 이동 */
.relative-element {
    position: relative;
    top: 20px;
    left: 30px;
    /* 원래 자리는 그대로 유지됨 */
}

/* 6-3. absolute - 가장 가까운 positioned 부모 기준으로 절대 위치 */
.absolute-element {
    position: absolute;
    top: 50px;
    right: 20px;
    /* 문서 흐름에서 제거됨 */
}

/* 6-4. fixed - 브라우저 창 기준으로 고정 */
.fixed-element {
    position: fixed;
    bottom: 20px;
    right: 20px;
    /* 스크롤해도 항상 같은 위치 */
}

/* 6-5. sticky - 스크롤 위치에 따라 relative/fixed 전환 */
.sticky-element {
    position: sticky;
    top: 0;
    /* 임계점 도달하면 고정됨 */
}

/* 6-6. z-index - 요소 쌓임 순서 (position이 static이 아닐 때만) */
.front-element {
    position: relative;
    z-index: 10; /* 값이 클수록 앞에 표시 */
}

/* ============================================
7. Flexbox - 유연한 레이아웃
   ============================================ */

/* 7-1. Flex Container 설정 */
.flex-container {
    display: flex;
    
    /* 주축 방향 설정 */
    flex-direction: row; /* row(기본), column, row-reverse, column-reverse */
    
    /* 주축 정렬 (가로 정렬) */
    justify-content: flex-start; /* flex-start, flex-end, center, space-between, space-around, space-evenly */
    
    /* 교차축 정렬 (세로 정렬) */
    align-items: stretch; /* stretch(기본), flex-start, flex-end, center, baseline */
    
    /* 줄바꿈 설정 */
    flex-wrap: nowrap; /* nowrap(기본), wrap, wrap-reverse */
}

/* justify-content 예시들 */
.justify-start { justify-content: flex-start; }    /* 왼쪽 정렬 */
.justify-end { justify-content: flex-end; }        /* 오른쪽 정렬 */
.justify-center { justify-content: center; }       /* 가운데 정렬 */
.justify-between { justify-content: space-between; } /* 양끝 붙이고 균등 분배 */
.justify-around { justify-content: space-around; }   /* 요소 주변 균등 간격 */
.justify-evenly { justify-content: space-evenly; }   /* 모든 간격 동일 */

/* 7-2. Flex Item 설정 */
.flex-item {
    /* 늘어나는 비율 */
    flex-grow: 1;
    
    /* 줄어드는 비율 */
    flex-shrink: 1;
    
    /* 기본 크기 */
    flex-basis: auto;
    
    /* 축약형 */
    flex: 1 1 auto; /* grow shrink basis */
}

/* ============================================
8. 기본 스타일링 속성들
   ============================================ */

/* 8-1. 텍스트 관련 */
.text-styles {
    color: #333333;              /* 글자 색상 */
    font-family: Arial, sans-serif; /* 글꼴 */
    font-size: 16px;             /* 글자 크기 */
    font-weight: bold;           /* 글자 굵기 */
    text-align: center;          /* 텍스트 정렬 */
    text-decoration: underline;  /* 텍스트 장식 */
    line-height: 1.5;           /* 줄 간격 */
}

/* 8-2. 배경 관련 */
.background-styles {
    background-color: #f0f0f0;   /* 배경 색상 */
    background-image: url('image.jpg'); /* 배경 이미지 */
    background-size: cover;      /* 배경 크기 */
    background-position: center; /* 배경 위치 */
    background-repeat: no-repeat; /* 배경 반복 */
}

/* 8-3. 테두리 관련 */
.border-styles {
    border: 2px solid #333;      /* 테두리 (두께 스타일 색상) */
    border-radius: 10px;         /* 모서리 둥글게 */
    border-top: 1px dashed red;  /* 특정 면만 테두리 */
}

/* 8-4. 여백 관련 */
.spacing-styles {
    margin: 20px;                /* 바깥 여백 (상하좌우 동일) */
    margin: 10px 20px;           /* 바깥 여백 (상하 10px, 좌우 20px) */
    margin: 10px 15px 20px 25px; /* 바깥 여백 (상 우 하 좌 시계방향) */
    
    padding: 15px;               /* 안쪽 여백 */
    padding-top: 10px;           /* 특정 방향만 여백 */
}

/* ============================================
9. 가상 선택자 (Pseudo Selectors)
   ============================================ */

/* 9-1. 마우스 호버 효과 */
.hover-effect:hover {
    color: red;
    background-color: yellow;
    cursor: pointer;
}

/* 9-2. 링크 상태별 스타일 */
a:link { color: blue; }      /* 방문하지 않은 링크 */
a:visited { color: purple; } /* 방문한 링크 */
a:hover { color: red; }      /* 마우스 올렸을 때 */
a:active { color: orange; }  /* 클릭하는 순간 */

/* 9-3. 구조적 가상 선택자 */
.list-item:first-child { font-weight: bold; }    /* 첫 번째 자식 */
.list-item:last-child { margin-bottom: 0; }      /* 마지막 자식 */
.list-item:nth-child(2n) { background: #f0f0f0; } /* 짝수 번째 */

/* ============================================
10. 반응형 디자인 - 미디어 쿼리
   ============================================ */

/* 화면 크기별 스타일 적용 */
@media screen and (max-width: 768px) {
    /* 모바일 화면 (768px 이하) */
    .container {
        width: 100%;
        padding: 10px;
    }
    
    .flex-container {
        flex-direction: column;
    }
}

@media screen and (min-width: 769px) and (max-width: 1024px) {
    /* 태블릿 화면 (769px ~ 1024px) */
    .container {
        width: 90%;
        margin: 0 auto;
    }
}

@media screen and (min-width: 1025px) {
    /* 데스크톱 화면 (1025px 이상) */
    .container {
        width: 1200px;
        margin: 0 auto;
    }
}

/* ============================================
11. 실무에서 자주 사용하는 패턴들
============================================ */

/* 11-1. 중앙 정렬 */
.center-horizontal {
    margin: 0 auto; /* 가로 중앙 정렬 */
    width: 80%;
}

.center-both {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* 완전 중앙 정렬 */
}

/* 11-2. 카드 스타일 */
.card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 20px;
    margin: 10px;
}

/* 11-3. 버튼 스타일 */
.button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s; /* 부드러운 색상 변화 */
}

.button:hover {
    background-color: #0056b3;
}

/* 11-4. 네비게이션 바 */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #333;
    padding: 1rem;
}

.navbar a {
    color: white;
    text-decoration: none;
    margin: 0 1rem;
}

.navbar a:hover {
    text-decoration: underline;
}

/* ============================================
    CSS 학습 팁:
    1. 개발자 도구(F12)로 실시간 확인하며 학습
    2. 작은 프로젝트부터 시작해서 점진적으로 복잡한 레이아웃 도전
    3. Flexbox와 Grid는 현대 웹 개발의 핵심이므로 집중 학습
    4. 반응형 디자인은 필수 - 모바일 우선으로 생각하기
   ============================================ */
